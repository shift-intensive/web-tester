/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * shift tester üß™
 * –ê–ø–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';
import { instance } from '../../src/utils/api/instance';
export interface SignInResponse {
  /** –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ */
  success: boolean;
  /** –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏ */
  reason?: string;
  /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */
  user: User;
  /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–æ–∫–µ–Ω */
  token: string;
}

export interface SignInDto {
  /** –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
  phone: string;
  /** –û—Ç–ø –∫–æ–¥ */
  code: number;
}

export interface OtpResponse {
  /** –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ */
  success: boolean;
  /** –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏ */
  reason?: string;
  /** –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–ø –∫–æ–¥–∞ –≤ –º—Å */
  retryDelay: number;
}

export interface CreateOtpDto {
  phone: string;
}

export interface UpdateProfileProfileDto {
  /** –ò–º—è */
  firstname?: string;
  /** –û—Ç—á–µ—Å—Ç–≤–æ */
  middlename?: string;
  /** –§–∞–º–∏–ª–∏—è */
  lastname?: string;
  /** –ü–æ—á—Ç–∞ */
  email?: string;
  /** –ì–æ—Ä–æ–¥ */
  city?: string;
}

export interface UpdateProfileDto {
  /** –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  profile: UpdateProfileProfileDto;
  /** –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
  phone: string;
}

export interface User {
  /** –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */
  phone: string;
  /** –ò–º—è */
  firstname?: string;
  /** –û—Ç—á–µ—Å—Ç–≤–æ */
  middlename?: string;
  /** –§–∞–º–∏–ª–∏—è */
  lastname?: string;
  /** –ü–æ—á—Ç–∞ */
  email?: string;
  /** –ì–æ—Ä–æ–¥ */
  city?: string;
}

export interface UpdateProfileResponse {
  /** –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ */
  success: boolean;
  /** –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏ */
  reason?: string;
  /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */
  user: User;
}

export interface SessionResponse {
  /** –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ */
  success: boolean;
  /** –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏ */
  reason?: string;
  /** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */
  user: User;
}

/**
 * @summary –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const testerControllerSession = (signal?: AbortSignal) => {
  return instance<SessionResponse>({ url: `/api/tester/session`, method: 'GET', signal });
};

export const getTesterControllerSessionQueryKey = () => {
  return [`/api/tester/session`] as const;
};

export const getTesterControllerSessionQueryOptions = <
  TData = Awaited<ReturnType<typeof testerControllerSession>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof testerControllerSession>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTesterControllerSessionQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof testerControllerSession>>> = ({
    signal
  }) => testerControllerSession(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof testerControllerSession>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type TesterControllerSessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof testerControllerSession>>
>;
export type TesterControllerSessionQueryError = unknown;

export function useTesterControllerSession<
  TData = Awaited<ReturnType<typeof testerControllerSession>>,
  TError = unknown
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof testerControllerSession>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof testerControllerSession>>, TError, TData>,
      'initialData'
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTesterControllerSession<
  TData = Awaited<ReturnType<typeof testerControllerSession>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof testerControllerSession>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof testerControllerSession>>,
        TError,
        TData
      >,
      'initialData'
    >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useTesterControllerSession<
  TData = Awaited<ReturnType<typeof testerControllerSession>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof testerControllerSession>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
/**
 * @summary –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useTesterControllerSession<
  TData = Awaited<ReturnType<typeof testerControllerSession>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof testerControllerSession>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTesterControllerSessionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const testerControllerUpdateProfile = (updateProfileDto: UpdateProfileDto) => {
  return instance<UpdateProfileResponse>({
    url: `/api/tester/profile`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: updateProfileDto
  });
};

export const getTesterControllerUpdateProfileMutationOptions = <
  TData = Awaited<ReturnType<typeof testerControllerUpdateProfile>>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: UpdateProfileDto }, TContext>;
}) => {
  const mutationKey = ['testerControllerUpdateProfile'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof testerControllerUpdateProfile>>,
    { data: UpdateProfileDto }
  > = (props) => {
    const { data } = props ?? {};

    return testerControllerUpdateProfile(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: UpdateProfileDto },
    TContext
  >;
};

export type TesterControllerUpdateProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof testerControllerUpdateProfile>>
>;
export type TesterControllerUpdateProfileMutationBody = UpdateProfileDto;
export type TesterControllerUpdateProfileMutationError = unknown;

/**
 * @summary –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const useTesterControllerUpdateProfile = <
  TData = Awaited<ReturnType<typeof testerControllerUpdateProfile>>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: UpdateProfileDto }, TContext>;
}): UseMutationResult<TData, TError, { data: UpdateProfileDto }, TContext> => {
  const mutationOptions = getTesterControllerUpdateProfileMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø –∫–æ–¥–∞
 */
export const testerControllerCreateOtp = (createOtpDto: CreateOtpDto, signal?: AbortSignal) => {
  return instance<OtpResponse>({
    url: `/api/tester/auth/otp`,
    method: 'POST',
    data: createOtpDto,
    signal
  });
};

export const getTesterControllerCreateOtpMutationOptions = <
  TData = Awaited<ReturnType<typeof testerControllerCreateOtp>>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: CreateOtpDto }, TContext>;
}) => {
  const mutationKey = ['testerControllerCreateOtp'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof testerControllerCreateOtp>>,
    { data: CreateOtpDto }
  > = (props) => {
    const { data } = props ?? {};

    return testerControllerCreateOtp(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: CreateOtpDto },
    TContext
  >;
};

export type TesterControllerCreateOtpMutationResult = NonNullable<
  Awaited<ReturnType<typeof testerControllerCreateOtp>>
>;
export type TesterControllerCreateOtpMutationBody = CreateOtpDto;
export type TesterControllerCreateOtpMutationError = unknown;

/**
 * @summary —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ø –∫–æ–¥–∞
 */
export const useTesterControllerCreateOtp = <
  TData = Awaited<ReturnType<typeof testerControllerCreateOtp>>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: CreateOtpDto }, TContext>;
}): UseMutationResult<TData, TError, { data: CreateOtpDto }, TContext> => {
  const mutationOptions = getTesterControllerCreateOtpMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
export const testerControllerSignin = (signInDto: SignInDto, signal?: AbortSignal) => {
  return instance<SignInResponse>({
    url: `/api/tester/signin`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: signInDto,
    signal
  });
};

export const getTesterControllerSigninMutationOptions = <
  TData = Awaited<ReturnType<typeof testerControllerSignin>>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: SignInDto }, TContext>;
}) => {
  const mutationKey = ['testerControllerSignin'];
  const { mutation: mutationOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof testerControllerSignin>>,
    { data: SignInDto }
  > = (props) => {
    const { data } = props ?? {};

    return testerControllerSignin(data);
  };

  return { mutationFn, ...mutationOptions } as UseMutationOptions<
    TData,
    TError,
    { data: SignInDto },
    TContext
  >;
};

export type TesterControllerSigninMutationResult = NonNullable<
  Awaited<ReturnType<typeof testerControllerSignin>>
>;
export type TesterControllerSigninMutationBody = SignInDto;
export type TesterControllerSigninMutationError = unknown;

/**
 * @summary –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
 */
export const useTesterControllerSignin = <
  TData = Awaited<ReturnType<typeof testerControllerSignin>>,
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<TData, TError, { data: SignInDto }, TContext>;
}): UseMutationResult<TData, TError, { data: SignInDto }, TContext> => {
  const mutationOptions = getTesterControllerSigninMutationOptions(options);

  return useMutation(mutationOptions);
};
